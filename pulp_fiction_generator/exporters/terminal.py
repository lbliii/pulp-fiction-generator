"""
Terminal exporter for Pulp Fiction Generator.
"""

import os
import shutil
import datetime
import time
from .base import BaseExporter
from .exceptions import ExporterFileError, ExporterDependencyError
from ...utils.errors import logger


class TerminalExporter(BaseExporter):
    """Exporter for terminal format with interactive display."""
    
    @staticmethod
    def check_dependencies() -> bool:
        """
        Check if rich is installed.
        
        Returns:
            bool: True if dependencies are available, False otherwise
        """
        try:
            import rich
            return True
        except ImportError:
            return False
    
    def export(self, content: str, output_path: str) -> str:
        """
        Export content to the terminal with rich formatting.
        Also saves content to the specified path.
        
        Args:
            content: The story content to export
            output_path: Path where the plain text version should be saved
            
        Returns:
            The path to the exported file
            
        Raises:
            ExporterDependencyError: If rich is not installed
            ExporterFileError: If unable to write to the output file
        """
        try:
            try:
                from rich.markdown import Markdown
                from rich.console import Console
                from rich.panel import Panel
                from rich.align import Align
                from rich.padding import Padding
                from rich.theme import Theme
                from rich.columns import Columns
                from rich.pager import Pager
            except ImportError:
                raise ExporterDependencyError(
                    "rich package is required for terminal export. "
                    "Install with: pip install rich"
                )
            
            # Create custom theme for pulp fiction style
            custom_theme = Theme({
                "h1": "bold bright_red",
                "h2": "bold yellow",
                "h3": "bold green",
                "paragraph": "bright_white",
                "code": "dim cyan",
                "quote": "italic bright_black",
                "bullet_list": "yellow",
            })
            
            console = Console(theme=custom_theme, width=min(120, shutil.get_terminal_size().columns))
            
            # Parse content to extract title
            title = self.extract_title(content) or "Untitled Story"
            
            # Create a title panel
            title_panel = Panel(
                Align.center(
                    f"[bold bright_red]{title}[/bold bright_red]\n\n"
                    f"[dim]Generated by Pulp Fiction Generator[/dim]\n"
                    f"[dim]{datetime.datetime.now().strftime('%B %d, %Y')}[/dim]"
                ),
                border_style="red",
                expand=False
            )
            
            # Display the title with dramatic effect
            console.print("\n")
            console.print(Align.center(title_panel))
            console.print("\n")
            time.sleep(0.5)
            
            # Ask if user wants to use pager mode or continuous scroll
            console.print(Padding("[yellow]How would you like to read this story?[/yellow]", (1, 0)))
            console.print(Columns([
                "[bold green]1. Paged mode[/bold green] (press space to advance)",
                "[bold green]2. Continuous mode[/bold green] (scroll at your own pace)"
            ]))
            
            choice = ""
            while choice not in ["1", "2"]:
                choice = console.input("[bold yellow]Enter your choice (1 or 2):[/bold yellow] ")
            
            if choice == "1":
                # Use Rich's pager for page-by-page reading
                md = Markdown(content)
                with console.pager():
                    console.print(md)
            else:
                # Display the full content at once with styled markdown
                console.print(Markdown(content))
            
            # Also save the plain text version to the output file
            with open(output_path, "w", encoding="utf-8") as f:
                f.write(content)
            
            return output_path
            
        except ExporterDependencyError:
            # Re-raise dependency errors
            raise
        except Exception as e:
            logger.error(f"Error exporting to terminal: {e}")
            
            # Try to save the file anyway, even if display failed
            try:
                with open(output_path, "w", encoding="utf-8") as f:
                    f.write(content)
                return output_path
            except Exception as write_error:
                # If file saving also fails, raise the original error
                raise ExporterFileError(f"Error exporting to terminal: {e}") from e 