"""
EPUB exporter for Pulp Fiction Generator.
"""

import datetime
from .base import BaseExporter
from .exceptions import ExporterFileError, ExporterDependencyError
from ...utils.errors import logger


class EpubExporter(BaseExporter):
    """Exporter for EPUB format."""
    
    @staticmethod
    def check_dependencies() -> bool:
        """
        Check if ebooklib and markdown are installed.
        
        Returns:
            bool: True if dependencies are available, False otherwise
        """
        try:
            import ebooklib
            import markdown
            return True
        except ImportError:
            return False
    
    def export(self, content: str, output_path: str) -> str:
        """
        Export content as EPUB.
        
        Args:
            content: The story content to export
            output_path: Path where the exported file should be saved
            
        Returns:
            The path to the exported file
            
        Raises:
            ExporterDependencyError: If ebooklib is not installed
            ExporterFileError: If unable to write to the output file
        """
        try:
            # Import dependencies
            try:
                from ebooklib import epub
                import markdown
            except ImportError:
                raise ExporterDependencyError(
                    "ebooklib and markdown packages are required for EPUB export. "
                    "Install with: pip install ebooklib markdown"
                )
                
            # Parse content to extract title and chapters
            lines = content.strip().split('\n')
            
            # Extract title (first line if it starts with # or "Untitled Story")
            title = self.extract_title(content) or "Untitled Story"
            
            # Create a new EPUB book
            book = epub.EpubBook()
            
            # Set metadata
            book.set_identifier(f'pulp-fiction-{title.lower().replace(" ", "-")}')
            book.set_title(title)
            book.set_language('en')
            book.add_author('Pulp Fiction Generator')
            
            # Add default CSS
            style = """
@namespace epub "http://www.idpf.org/2007/ops";

body {
    font-family: Cambria, Georgia, serif;
    line-height: 1.5;
    text-align: justify;
    padding: 0 !important;
    margin: 0 !important;
}

h1 {
    text-align: center;
    font-size: 2em;
    font-weight: bold;
    margin: 1em 0 1em 0;
    page-break-after: avoid;
}

h2 {
    text-align: center;
    font-size: 1.5em;
    font-weight: bold;
    margin: 1em 0 0.5em 0;
    page-break-before: always;
    page-break-after: avoid;
}

h3 {
    text-align: left;
    font-size: 1.2em;
    font-weight: bold;
    margin: 0.8em 0 0.3em 0;
    page-break-after: avoid;
}

p {
    margin: 0.5em 0;
    text-indent: 1.5em;
    orphans: 2;
    widows: 2;
}

/* First paragraph after heading has no indent */
h1 + p, h2 + p, h3 + p, h4 + p, h5 + p, h6 + p {
    text-indent: 0;
}

blockquote {
    font-style: italic;
    margin-left: 1em;
    margin-right: 1em;
    border-left: 0.25em solid #888;
    padding-left: 0.5em;
}

hr {
    border: none;
    border-top: 1px solid #888;
    margin: 1.5em auto;
    width: 50%;
}

.title-page {
    text-align: center;
    padding: 3em 0;
}

.title-page h1 {
    font-size: 2.2em;
    margin-bottom: 2em;
}

.title-page p {
    text-indent: 0;
    margin: 1em 0;
    font-style: italic;
}

@page {
    margin: 0.5em;
}
"""
            epub_css = epub.EpubItem(
                uid="style_default",
                file_name="style/default.css",
                media_type="text/css",
                content=style
            )
            book.add_item(epub_css)
            
            # Create a title page
            title_page_content = f"""
<div class="title-page">
    <h1>{title}</h1>
    <p>Generated by Pulp Fiction Generator</p>
    <p>{datetime.datetime.now().strftime("%B %d, %Y")}</p>
</div>
"""
            title_page = epub.EpubHtml(
                title='Title Page',
                file_name='title_page.xhtml',
                lang='en'
            )
            title_page.content = title_page_content
            title_page.add_item(epub_css)
            book.add_item(title_page)
            
            # Parse content into chapters
            chapters = []
            current_chapter_title = "Chapter 1"
            current_chapter_content = []
            chapter_count = 0
            in_new_chapter = False
            
            # Skip the title
            content_lines = lines[1:] if lines and lines[0].startswith('#') else lines
            
            for line in content_lines:
                if line.startswith('## '):  # Chapter heading
                    # Save previous chapter if it exists
                    if chapter_count > 0:
                        chapter_html = epub.EpubHtml(
                            title=current_chapter_title,
                            file_name=f'chapter_{chapter_count}.xhtml',
                            lang='en'
                        )
                        chapter_html.content = f"<h2>{current_chapter_title}</h2>\n" + "\n".join(current_chapter_content)
                        chapter_html.add_item(epub_css)
                        book.add_item(chapter_html)
                        chapters.append(chapter_html)
                        
                    # Start new chapter
                    current_chapter_title = line.replace('## ', '').strip()
                    current_chapter_content = []
                    chapter_count += 1
                    in_new_chapter = True
                else:
                    # If we haven't found a chapter heading yet but have content, create first chapter
                    if chapter_count == 0 and line.strip():
                        current_chapter_title = "Chapter 1"
                        chapter_count = 1
                        in_new_chapter = True
                    
                    if in_new_chapter and line.strip():
                        # Process line as markdown and add to current chapter
                        current_chapter_content.append(f"<p>{line}</p>" if not line.startswith('#') else 
                                                      f"<h3>{line.replace('### ', '').strip()}</h3>" if line.startswith('### ') else
                                                      line)
            
            # Add the last chapter
            if chapter_count > 0 and current_chapter_content:
                chapter_html = epub.EpubHtml(
                    title=current_chapter_title,
                    file_name=f'chapter_{chapter_count}.xhtml',
                    lang='en'
                )
                chapter_html.content = f"<h2>{current_chapter_title}</h2>\n" + "\n".join(current_chapter_content)
                chapter_html.add_item(epub_css)
                book.add_item(chapter_html)
                chapters.append(chapter_html)
            else:
                # If no chapters were defined, create a single chapter with all content
                chapter_html = epub.EpubHtml(
                    title="Chapter 1",
                    file_name='chapter_1.xhtml',
                    lang='en'
                )
                md_content = markdown.markdown(content)
                chapter_html.content = md_content
                chapter_html.add_item(epub_css)
                book.add_item(chapter_html)
                chapters.append(chapter_html)
            
            # Define Table of Contents
            book.toc = (chapters)
            
            # Add default NCX and Nav files
            book.add_item(epub.EpubNcx())
            book.add_item(epub.EpubNav())
            
            # Define spine
            book.spine = ['nav', title_page] + chapters
            
            # Create epub file
            epub.write_epub(output_path, book, {})
            
            return output_path
            
        except ExporterDependencyError:
            # Re-raise dependency errors
            raise
        except Exception as e:
            logger.error(f"Error exporting to EPUB: {e}")
            raise ExporterFileError(f"Error exporting to EPUB: {e}") from e 